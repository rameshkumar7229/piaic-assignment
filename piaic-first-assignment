#!/usr/bin/env python
# coding: utf-8

# ## 1. Calculate Area of a Circle

# #### Write a Python program which accepts the radius of a circle from the user and compute the area.
# ###### Program Console Sample Output 1:
# ###### Input Radius: 0.5
# ###### Area of Circle with radius 0.5 is 0.7853981634

# In[14]:


def circle(x):
    area=3.14*x**2
    print(area)


# In[15]:


circle(0.5)


# In[17]:


r=float(input("enter radius"))
area=3.14*r**2
print("the area of circle is "+ str(area))


# ## 2. Check Number either positive, negative or zero

# #### Write a Python program to check if a number is positive, negative or zero
# ###### Program Console Sample Output 1:
# ###### Enter Number: -1
# ##### Negative Number Entered
# ###### Program Console Sample Output 2:
# ##### Integer: 3
# ##### Positive Number Entered
# ###### Program Console Sample Output 3:
# ##### Integer: 0
# ###### Zero Entered

# In[20]:


def num(x):
    if x>0 :
        print("its positive")
    elif x==0:
        print("its zero")
    else:
        print("its negative")


# In[21]:


num(-1)


# In[22]:


num(3)


# In[23]:


num(0)


# ## 3. Divisibility Check of two numbers

# #### Write a Python program to check whether a number is completely divisible by another number. Accept two integer values form the user
# ##### Program Console Sample Output 1:
# ###### Enter numerator: 4
# ###### Enter Denominator: 2
# ##### Number 4 is Completely divisible by 2
# ###### Program Console Sample Output 2:
# ##### Enter numerator: 7
# 
# ##### Enter Denominator: 4
# ###### Number 7 is not Completely divisible by 4

# In[27]:


def num(x,y):
    z=x%y
    if z==0:
        print(str(x)+ " completly divisable by  "+ str (y))
    else:
        print(str(x)+"  not completely by  "+str(y))


# In[30]:


num(4,2)


# In[29]:


num(7,4)


# In[ ]:





# In[ ]:





# In[ ]:





# ## 4. Calculate Volume of a sphere

# ##### Write a Python program to get the volume of a sphere, please take the radius as input from user

# ##### Program Console Output:
# ##### Enter Radius of Sphere: 1
# ###### Volume of the Sphere with Radius 1 is 4.18

# In[34]:


radius=float(input("enter radius of sphere"))
volume=4/3*3.14*radius**3
print("Volume of the Sphere with Radius "+str(radius)+' is '+str(volume))


# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# ## 5. Copy string n times
# #### Write a Python program to get a string which is n (non-negative integer) copies of a given string.
# ##### Program Console Output:
# ##### Enter String: Hi
# ###### How many copies of String you need: 4
# ###### 4 Copies of Hi are HiHiHiHi

# In[37]:


def p(item,n):
    y=item*n
    print(y)


# In[40]:


p("Hi",4)


# In[ ]:





# In[ ]:





# In[ ]:





# ## 6. Check if number is Even or Odd
# ### Write a Python program to find whether a given number (accept from the user) is even or odd, print out an appropriate message to the user
# #### Program Console Output 1:
# ##### Enter Number: 4
# ###### 4 is Even
# #### Program Console Output 2:
# ##### Enter Number: 9
# ###### 9 is Odd

# In[43]:


def num(x):
    if x%2==0:
        print("number is even")
    else:
        print("number is odd")
        


# 

# In[44]:


num(4)


# 

# In[45]:


num(9)


# ## 7. Vowel Tester
# ### Write a Python program to test whether a passed letter is a vowel or not
# #### Program Console Output 1:
# ##### Enter a character: A
# ###### Letter A is Vowel
# #### Program Console Output 2:
# ##### Enter a character: e
# ###### Letter e is Vowel
# #### Program Console Output 2:
# ##### Enter a character: N
# ###### Letter N is not Vowel

# In[75]:


def alpha(x):
    
    a=["a","e","i","o","u"]
    A=["A","E","I","O","U"]
    
    if x in a or x in A:
            print("its vovel")
    else:
            print("not vovel")


# In[76]:


alpha("A")


# In[77]:


alpha("e")


# In[78]:


alpha("N")


# ## 8. Triangle area
# ### Write a Python program that will accept the base and height of a triangle and compute the area
# ###### Reference:
# https://www.mathgoodies.com/lessons/vol1/area_triangle

# In[79]:


#A=(height+base)/2


def tra(height,base):
    area=(height+base)/2
    print("The area of triangle is  "+ str(area))


# In[80]:


tra(4,6)


# In[81]:


tra(10,2)


# In[ ]:





# ## 9. Calculate Interest
# ### Write a Python program to compute the future value of a specified principal amount, rate of interest, and a number of years
# #### Program Console Sample 1:
# ##### Please enter principal amount: 10000
# ###### Please Enter Rate of interest in %: 0.1
# ###### Enter number of years for investment: 5
# ###### After 5 years your principal amount 10000 over an interest rate of 0.1 % will be 16105.1

# In[89]:


# future value formula will be used with no computation 
#fv = pv(1+r)^t


principle_amount=(int(input("enter the value")))
rate_of_interest=(float(input("enter the interest rate")))
years=(int(input("enter number of years")))
z=principle_amount*((1+rate_of_interest)**years)
print(z)


# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# ## 10. Euclidean distance
# ### write a Python program to compute the distance between the points (x1, y1) and (x2, y2).
# #### Program Console Sample 1:
# ###### Enter Co-ordinate for x1: 2
# ###### Enter Co-ordinate for x2: 4
# ###### Enter Co-ordinate for y1: 4
# ###### Enter Co-ordinate for y2: 4
# ###### Distance between points (2, 4) and (4, 4) is 2

# ###### Reference:
# https://en.wikipedia.org/wiki/Euclidean_distance

# In[90]:


import math 


# In[95]:


def distance(x1,x2,y1,y2):
    z=((y1-x1)+(y2-x2))**2
    z=math.sqrt(z)
    
    print(z)
    


# In[96]:


distance(2,4,4,4)


# In[ ]:





# ## 11. Feet to Centimeter Converter
# ### Write a Python program to convert height in feet to centimetres.
# ##### Program Console Sample 1:
# ###### Enter Height in Feet: 5
# ###### There are 152.4 Cm in 5 ft
# ###### Reference:
# https://www.rapidtables.com/convert/length/feet-to-cm.html

# In[97]:


# formula 1=ft=30,48
# d(cm) = d(ft) Ã— 30.48


# In[108]:


d=(float(input("enter feet")))
cm=d*30.48
print("There are "+ str(cm) + " in  " + str(d)+' ft')


# In[ ]:





# In[ ]:





# ## 12. BMI Calculator
# ### Write a Python program to calculate body mass index
# ##### Program Console Sample 1:
# ###### Enter Height in Cm: 180
# ###### Enter Weight in Kg: 75
# ###### Your BMI is 23.15

# In[113]:


#bmi=kg/m2 or [weight (kg) / height (cm) / height (cm)] x 10,000
h=(int(input("enter the height in cm")))
w=(int(input("enter the weight in kg")))
bmi =(w/h/h)*10000
(print("your bmi is  "+str(bmi)))


# In[ ]:





# In[ ]:





# ## 13. Sum of n Positive Integers
# ### Write a python program to sum of the first n positive integers
# #### Program Console Sample 1:
# ###### Enter value of n: 5
# ###### Sum of n Positive integers till 5 is 15

# In[116]:


n = (int(input("Input a number: ")))
sum_num = (n * (n + 1)) / 2
print(sum_num)


# In[ ]:





# In[ ]:





# ## 14. Digits Sum of a Number
# ### Write a Python program to calculate the sum of the digits in an integer
# #### Program Console Sample 1:
# ##### Enter a number: 15
# ###### Sum of 1 + 5 is 6
# #### Program Console Sample 2:
# ##### Enter a number: 1234
# ###### Sum of 1 + 2 + 3 + 4 is 10

# In[118]:


num = int(input("Input a four digit numbers: "))
x  = num //1000
x1 = (num - x*1000)//100
x2 = (num - x*1000 - x1*100)//10
x3 = num - x*1000 - x1*100 - x2*10
print("The sum of digits in the number is", x+x1+x2+x3)


# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Calculate Area of a Circle"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Write a Python program which accepts the radius of a circle from the user and compute the area.\n",
    "###### Program Console Sample Output 1:\n",
    "###### Input Radius: 0.5\n",
    "###### Area of Circle with radius 0.5 is 0.7853981634"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def circle(x):\n",
    "    area=3.14*x**2\n",
    "    print(area)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.785\n"
     ]
    }
   ],
   "source": [
    "circle(0.5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter radius0.5\n",
      "the area of circle is 0.785\n"
     ]
    }
   ],
   "source": [
    "r=float(input(\"enter radius\"))\n",
    "area=3.14*r**2\n",
    "print(\"the area of circle is \"+ str(area))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Check Number either positive, negative or zero"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Write a Python program to check if a number is positive, negative or zero\n",
    "###### Program Console Sample Output 1:\n",
    "###### Enter Number: -1\n",
    "##### Negative Number Entered\n",
    "###### Program Console Sample Output 2:\n",
    "##### Integer: 3\n",
    "##### Positive Number Entered\n",
    "###### Program Console Sample Output 3:\n",
    "##### Integer: 0\n",
    "###### Zero Entered"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def num(x):\n",
    "    if x>0 :\n",
    "        print(\"its positive\")\n",
    "    elif x==0:\n",
    "        print(\"its zero\")\n",
    "    else:\n",
    "        print(\"its negative\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "its negative\n"
     ]
    }
   ],
   "source": [
    "num(-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "its positive\n"
     ]
    }
   ],
   "source": [
    "num(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "its zero\n"
     ]
    }
   ],
   "source": [
    "num(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Divisibility Check of two numbers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Write a Python program to check whether a number is completely divisible by another number. Accept two integer values form the user\n",
    "##### Program Console Sample Output 1:\n",
    "###### Enter numerator: 4\n",
    "###### Enter Denominator: 2\n",
    "##### Number 4 is Completely divisible by 2\n",
    "###### Program Console Sample Output 2:\n",
    "##### Enter numerator: 7\n",
    "\n",
    "##### Enter Denominator: 4\n",
    "###### Number 7 is not Completely divisible by 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def num(x,y):\n",
    "    z=x%y\n",
    "    if z==0:\n",
    "        print(str(x)+ \" completly divisable by  \"+ str (y))\n",
    "    else:\n",
    "        print(str(x)+\"  not completely by  \"+str(y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4completly divisable by 2\n"
     ]
    }
   ],
   "source": [
    "num(4,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7  not completely by  4\n"
     ]
    }
   ],
   "source": [
    "num(7,4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Calculate Volume of a sphere"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Write a Python program to get the volume of a sphere, please take the radius as input from user"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Program Console Output:\n",
    "##### Enter Radius of Sphere: 1\n",
    "###### Volume of the Sphere with Radius 1 is 4.18"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter radius of sphere1\n",
      "Volume of the Sphere with Radius 1.0 is 4.1866666666666665\n"
     ]
    }
   ],
   "source": [
    "radius=float(input(\"enter radius of sphere\"))\n",
    "volume=4/3*3.14*radius**3\n",
    "print(\"Volume of the Sphere with Radius \"+str(radius)+' is '+str(volume))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Copy string n times\n",
    "#### Write a Python program to get a string which is n (non-negative integer) copies of a given string.\n",
    "##### Program Console Output:\n",
    "##### Enter String: Hi\n",
    "###### How many copies of String you need: 4\n",
    "###### 4 Copies of Hi are HiHiHiHi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def p(item,n):\n",
    "    y=item*n\n",
    "    print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HiHiHiHi\n"
     ]
    }
   ],
   "source": [
    "p(\"Hi\",4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Check if number is Even or Odd\n",
    "### Write a Python program to find whether a given number (accept from the user) is even or odd, print out an appropriate message to the user\n",
    "#### Program Console Output 1:\n",
    "##### Enter Number: 4\n",
    "###### 4 is Even\n",
    "#### Program Console Output 2:\n",
    "##### Enter Number: 9\n",
    "###### 9 is Odd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "def num(x):\n",
    "    if x%2==0:\n",
    "        print(\"number is even\")\n",
    "    else:\n",
    "        print(\"number is odd\")\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number is even\n"
     ]
    }
   ],
   "source": [
    "num(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number is odd\n"
     ]
    }
   ],
   "source": [
    "num(9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Vowel Tester\n",
    "### Write a Python program to test whether a passed letter is a vowel or not\n",
    "#### Program Console Output 1:\n",
    "##### Enter a character: A\n",
    "###### Letter A is Vowel\n",
    "#### Program Console Output 2:\n",
    "##### Enter a character: e\n",
    "###### Letter e is Vowel\n",
    "#### Program Console Output 2:\n",
    "##### Enter a character: N\n",
    "###### Letter N is not Vowel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "def alpha(x):\n",
    "    \n",
    "    a=[\"a\",\"e\",\"i\",\"o\",\"u\"]\n",
    "    A=[\"A\",\"E\",\"I\",\"O\",\"U\"]\n",
    "    \n",
    "    if x in a or x in A:\n",
    "            print(\"its vovel\")\n",
    "    else:\n",
    "            print(\"not vovel\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "its vovel\n"
     ]
    }
   ],
   "source": [
    "alpha(\"A\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "its vovel\n"
     ]
    }
   ],
   "source": [
    "alpha(\"e\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "not vovel\n"
     ]
    }
   ],
   "source": [
    "alpha(\"N\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Triangle area\n",
    "### Write a Python program that will accept the base and height of a triangle and compute the area\n",
    "###### Reference:\n",
    "https://www.mathgoodies.com/lessons/vol1/area_triangle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "#A=(height+base)/2\n",
    "\n",
    "\n",
    "def tra(height,base):\n",
    "    area=(height+base)/2\n",
    "    print(\"The area of triangle is  \"+ str(area))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The area of triangle is  5.0\n"
     ]
    }
   ],
   "source": [
    "tra(4,6)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The area of triangle is  6.0\n"
     ]
    }
   ],
   "source": [
    "tra(10,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Calculate Interest\n",
    "### Write a Python program to compute the future value of a specified principal amount, rate of interest, and a number of years\n",
    "#### Program Console Sample 1:\n",
    "##### Please enter principal amount: 10000\n",
    "###### Please Enter Rate of interest in %: 0.1\n",
    "###### Enter number of years for investment: 5\n",
    "###### After 5 years your principal amount 10000 over an interest rate of 0.1 % will be 16105.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the value10000\n",
      "enter the interest rate.1\n",
      "enter number of years5\n",
      "16105.100000000006\n"
     ]
    }
   ],
   "source": [
    "# future value formula will be used with no computation \n",
    "#fv = pv(1+r)^t\n",
    "\n",
    "\n",
    "principle_amount=(int(input(\"enter the value\")))\n",
    "rate_of_interest=(float(input(\"enter the interest rate\")))\n",
    "years=(int(input(\"enter number of years\")))\n",
    "z=principle_amount*((1+rate_of_interest)**years)\n",
    "print(z)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 10. Euclidean distance\n",
    "### write a Python program to compute the distance between the points (x1, y1) and (x2, y2).\n",
    "#### Program Console Sample 1:\n",
    "###### Enter Co-ordinate for x1: 2\n",
    "###### Enter Co-ordinate for x2: 4\n",
    "###### Enter Co-ordinate for y1: 4\n",
    "###### Enter Co-ordinate for y2: 4\n",
    "###### Distance between points (2, 4) and (4, 4) is 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Reference:\n",
    "https://en.wikipedia.org/wiki/Euclidean_distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "def distance(x1,x2,y1,y2):\n",
    "    z=((y1-x1)+(y2-x2))**2\n",
    "    z=math.sqrt(z)\n",
    "    \n",
    "    print(z)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.0\n"
     ]
    }
   ],
   "source": [
    "distance(2,4,4,4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 11. Feet to Centimeter Converter\n",
    "### Write a Python program to convert height in feet to centimetres.\n",
    "##### Program Console Sample 1:\n",
    "###### Enter Height in Feet: 5\n",
    "###### There are 152.4 Cm in 5 ft\n",
    "###### Reference:\n",
    "https://www.rapidtables.com/convert/length/feet-to-cm.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "# formula 1=ft=30,48\n",
    "# d(cm) = d(ft) Ã— 30.48\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter feet5\n",
      "There are 152.4 in  5.0 ft\n"
     ]
    }
   ],
   "source": [
    "d=(float(input(\"enter feet\")))\n",
    "cm=d*30.48\n",
    "print(\"There are \"+ str(cm) + \" in  \" + str(d)+' ft')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 12. BMI Calculator\n",
    "### Write a Python program to calculate body mass index\n",
    "##### Program Console Sample 1:\n",
    "###### Enter Height in Cm: 180\n",
    "###### Enter Weight in Kg: 75\n",
    "###### Your BMI is 23.15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the height in cm180\n",
      "enter the weight in kg75\n",
      "your bmi is  23.148148148148152\n"
     ]
    }
   ],
   "source": [
    "#bmi=kg/m2 or [weight (kg) / height (cm) / height (cm)] x 10,000\n",
    "h=(int(input(\"enter the height in cm\")))\n",
    "w=(int(input(\"enter the weight in kg\")))\n",
    "bmi =(w/h/h)*10000\n",
    "(print(\"your bmi is  \"+str(bmi)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 13. Sum of n Positive Integers\n",
    "### Write a python program to sum of the first n positive integers\n",
    "#### Program Console Sample 1:\n",
    "###### Enter value of n: 5\n",
    "###### Sum of n Positive integers till 5 is 15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input a number: 5\n",
      "15.0\n"
     ]
    }
   ],
   "source": [
    "n = (int(input(\"Input a number: \")))\n",
    "sum_num = (n * (n + 1)) / 2\n",
    "print(sum_num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 14. Digits Sum of a Number\n",
    "### Write a Python program to calculate the sum of the digits in an integer\n",
    "#### Program Console Sample 1:\n",
    "##### Enter a number: 15\n",
    "###### Sum of 1 + 5 is 6\n",
    "#### Program Console Sample 2:\n",
    "##### Enter a number: 1234\n",
    "###### Sum of 1 + 2 + 3 + 4 is 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input a four digit numbers: 1234\n",
      "The sum of digits in the number is 10\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Input a four digit numbers: \"))\n",
    "x  = num //1000\n",
    "x1 = (num - x*1000)//100\n",
    "x2 = (num - x*1000 - x1*100)//10\n",
    "x3 = num - x*1000 - x1*100 - x2*10\n",
    "print(\"The sum of digits in the number is\", x+x1+x2+x3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}





# In[ ]:



